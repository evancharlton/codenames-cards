{"version":3,"sources":["Game/Game.module.css","components/GenerateButton/GenerateButton.module.css","Landing/Landing.module.css","Game/Square/Square.module.css","components/GenerateButton/GenerateButton.tsx","Landing/Landing.tsx","colors.ts","Game/Square/Square.tsx","Game/Overlay/Overlay.tsx","Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","GenerateButton","className","push","useHistory","newBoard","useCallback","Date","now","onClick","styles","generate","filter","Boolean","join","style","fontSize","Landing","container","COLORS","Square","kind","square","backgroundColor","Overlay","useState","display","setDisplay","reveal","width","height","position","flexDirection","alignContent","alignItems","top","left","margin","textAlign","justifyContent","BOARD","Game","seed","useParams","copied","setCopied","board","useMemo","rng","seedrandom","custom","extraCard","Math","floor","array","temporaryValue","randomIndex","currentIndex","length","shuffle","clipboard","copy","window","location","href","useEffect","first","card","pageContainer","grid","borderColor","map","id","copyContainer","App","basename","includes","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ff0d31b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContainer\":\"Game_pageContainer__1DRvU\",\"container\":\"Game_container__389O2\",\"grid\":\"Game_grid__2QaGu\",\"copy\":\"Game_copy__2WYVQ\",\"copyContainer\":\"Game_copyContainer__x4sbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"generate\":\"GenerateButton_generate__KcDW6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Landing_container__3Vfqi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__3q6Ru\"};","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styles from './GenerateButton.module.css';\n\ntype Props = {\n  className?: string;\n};\n\nconst GenerateButton = ({ className }: Props) => {\n  const { push } = useHistory();\n  const newBoard = useCallback(() => {\n    push(`/${Date.now()}`);\n  }, [push]);\n  return (\n    <button\n      onClick={newBoard}\n      className={[className, styles.generate].filter(Boolean).join(' ')}\n      style={{ fontSize: 24 }}\n    >\n      Generate a new board\n    </button>\n  );\n};\n\nexport default GenerateButton;\n","import React from 'react';\nimport GenerateButton from '../components/GenerateButton';\nimport styles from './Landing.module.css';\n\nconst Landing = () => {\n  return (\n    <div className={styles.container}>\n      <GenerateButton />\n    </div>\n  );\n};\n\nexport default Landing;\n","export const COLORS = ['#a81111', '#0a2bad', '#f5eaa4', '#242424'] as const;\n","import React from 'react';\nimport { COLORS } from '../../colors';\nimport styles from './Square.module.css';\n\ntype Props = {\n  kind: number;\n};\n\nconst Square = ({ kind }: Props) => {\n  return (\n    <div\n      className={styles.square}\n      style={{\n        backgroundColor: COLORS[kind],\n      }}\n    ></div>\n  );\n};\n\nexport default Square;\n","import React, { useCallback, useState } from 'react';\n\nconst Overlay = () => {\n  const [display, setDisplay] = useState('none');\n  const reveal = useCallback(() => {\n    setDisplay('none');\n  }, [setDisplay]);\n\n  return (\n    <div\n      style={{\n        display,\n        width: '100%',\n        height: '100%',\n        backgroundColor: '#fff',\n        position: 'absolute',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        top: 0,\n        left: 0,\n      }}\n    >\n      <div\n        style={{ display: 'inline-block', margin: '5em', textAlign: 'center' }}\n      >\n        <h1>Are you a spymaster?</h1>\n        <p style={{ textAlign: 'justify' }}>\n          If you're a spymaster, click below to reveal the card.\n        </p>\n        <p style={{ textAlign: 'justify' }}>\n          If you aren't, then please wait your turn :-)\n        </p>\n      </div>\n\n      <button\n        style={{ justifyContent: 'flex-end', width: '50%' }}\n        onClick={reveal}\n      >\n        Reveal\n      </button>\n    </div>\n  );\n};\n\nexport default Overlay;\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport seedrandom from 'seedrandom';\nimport GenerateButton from '../components/GenerateButton';\nimport Square from './Square';\nimport Overlay from './Overlay';\nimport { COLORS } from '../colors';\nimport copy from 'copy-to-clipboard';\nimport styles from './Game.module.css';\n\nfunction shuffle<T>(array: T[], rng: () => number): T[] {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst RED = 0; // 8 || 9 of these\nconst BLUE = 1; // 8 || 9 of these\nconst BYSTANDER = 2; // 7 of these\nconst ASSASSIN = 3; // 1 of these\n\nconst BOARD = [\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  ASSASSIN,\n] as const;\n\nconst Game = () => {\n  const { seed } = useParams<{ seed: string }>();\n  const [copied, setCopied] = useState(false);\n\n  const board = useMemo(() => {\n    const rng = seedrandom(seed);\n    const custom = [...BOARD];\n    const extraCard = (Math.floor(rng() * 2) % 2) as 0 | 1;\n    custom.push(extraCard);\n    const shuffled = shuffle(custom, rng);\n    return shuffled;\n  }, [seed]);\n\n  const clipboard = useCallback(() => {\n    setCopied(copy(window.location.href));\n  }, [setCopied]);\n\n  useEffect(() => {\n    setCopied(false);\n  }, [seed, setCopied]);\n\n  const first = (board.filter((card) => card === BLUE).length % 2) as 0 | 1;\n\n  return (\n    <div className={styles.pageContainer}>\n      <div className={styles.container}>\n        <div\n          className={styles.grid}\n          style={{ borderColor: `${COLORS[first]}CC` }}\n        >\n          {board.map((kind, id) => {\n            return <Square kind={kind} key={id} />;\n          })}\n          <Overlay key={seed} />\n        </div>\n        <div className={styles.copyContainer}>\n          <button className={styles.copy} onClick={clipboard}>\n            #{seed}\n          </button>\n          <p>\n            {!copied && '⬑ Click to copy (you can also just copy the URL) ⬏'}\n            {copied && 'URL copied to your clipboard! '}\n          </p>\n        </div>\n        <GenerateButton />\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Landing from './Landing';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <Router\n      basename={\n        window.location.href.includes('localhost') ? '/' : '/codenames-cards/'\n      }\n    >\n      <Switch>\n        <Route path=\"/:seed\">\n          <Game />\n        </Route>\n        <Route path=\"/\">\n          <Landing />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}