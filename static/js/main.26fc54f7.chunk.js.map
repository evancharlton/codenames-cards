{"version":3,"sources":["components/GenerateButton/GenerateButton.tsx","Landing/Landing.tsx","Game/Square/Square.tsx","Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GenerateButton","push","useHistory","newBoard","useCallback","Date","now","onClick","style","fontSize","Landing","COLORS","Square","kind","margin","width","height","backgroundColor","BOARD","Game","seed","useParams","board","useMemo","rng","seedrandom","custom","extraCard","Math","floor","array","temporaryValue","randomIndex","currentIndex","length","shuffle","display","flexDirection","gridTemplateColumns","map","id","disabled","value","window","location","href","textAlign","marginBottom","marginTop","App","alignContent","justifyContent","alignItems","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAeeA,EAZQ,WAAO,IACpBC,EAASC,cAATD,KACFE,EAAWC,uBAAY,WAC3BH,EAAK,IAAD,OAAKI,KAAKC,UACb,CAACL,IACJ,OACE,wBAAQM,QAASJ,EAAUK,MAAO,CAAEC,SAAU,IAA9C,mCCFWC,EAJC,WACd,OAAO,cAAC,EAAD,K,yBCEHC,EAAS,CAAC,UAAW,UAAW,UAAW,WAelCC,EAbA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAChB,OACE,qBACEL,MAAO,CACLM,OAAQ,EACRC,MAAO,IACPC,OAAQ,IACRC,gBAAiBN,EAAOE,OCWhC,IAKMK,EAAQ,CALF,gBACC,gBACK,cACD,GAyEFC,EA5CF,WAAO,IACVC,EAASC,cAATD,KAEFE,EAAQC,mBAAQ,WACpB,IAAMC,EAAMC,IAAWL,GACjBM,EAAM,UAAOR,GACbS,EAAaC,KAAKC,MAAc,EAARL,KAAa,EAG3C,OAFAE,EAAOzB,KAAK0B,GA3DhB,SAAoBG,EAAYN,GAM9B,IALA,IACEO,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcJ,KAAKC,MAAML,IAAQS,GAIjCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EA2CYK,CAAQT,EAAQF,KAEhC,CAACJ,IAEJ,OACE,sBACEZ,MAAO,CACL4B,QAAS,OACTC,cAAe,UAHnB,UAME,qBACE7B,MAAO,CACL4B,QAAS,cACTE,oBAAqB,kBAHzB,SAMGhB,EAAMiB,KAAI,SAAC1B,EAAM2B,GAChB,OAAO,cAAC,EAAD,CAAQ3B,KAAMA,GAAW2B,QAGpC,uBACEC,UAAQ,EACRC,MAAOC,OAAOC,SAASC,KACvBrC,MAAO,CACLsC,UAAW,SACXrC,SAAU,GACVsC,aAAc,EACdC,UAAW,KAGf,cAAC,EAAD,QCjESC,MA3Bf,WACE,OACE,qBACEzC,MAAO,CACL4B,QAAS,OACTc,aAAc,SACdC,eAAgB,SAChBC,WAAY,SACZf,cAAe,MACfpB,gBAAiB,OACjBD,OAAQ,SARZ,SAWE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqC,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,cCVGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26fc54f7.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst GenerateButton = () => {\n  const { push } = useHistory();\n  const newBoard = useCallback(() => {\n    push(`/${Date.now()}`);\n  }, [push]);\n  return (\n    <button onClick={newBoard} style={{ fontSize: 24 }}>\n      Generate a new board\n    </button>\n  );\n};\n\nexport default GenerateButton;\n","import React from 'react';\nimport GenerateButton from '../components/GenerateButton';\n\nconst Landing = () => {\n  return <GenerateButton />;\n};\n\nexport default Landing;\n","import React from 'react';\n\ntype Props = {\n  kind: number;\n};\n\nconst COLORS = ['#a81111', '#0a2bad', '#f5eaa4', '#242424'] as const;\n\nconst Square = ({ kind }: Props) => {\n  return (\n    <div\n      style={{\n        margin: 2,\n        width: 100,\n        height: 100,\n        backgroundColor: COLORS[kind],\n      }}\n    ></div>\n  );\n};\n\nexport default Square;\n","import React, { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport seedrandom from 'seedrandom';\nimport GenerateButton from '../components/GenerateButton';\nimport Square from './Square';\n\nfunction shuffle<T>(array: T[], rng: () => number): T[] {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst RED = 0; // 8 || 9 of these\nconst BLUE = 1; // 8 || 9 of these\nconst BYSTANDER = 2; // 7 of these\nconst ASSASSIN = 3; // 1 of these\n\nconst BOARD = [\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  RED,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BLUE,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  BYSTANDER,\n  ASSASSIN,\n] as const;\n\nconst Game = () => {\n  const { seed } = useParams<{ seed: string }>();\n\n  const board = useMemo(() => {\n    const rng = seedrandom(seed);\n    const custom = [...BOARD];\n    const extraCard = (Math.floor(rng() * 2) % 2) as 0 | 1;\n    custom.push(extraCard);\n    const shuffled = shuffle(custom, rng);\n    return shuffled;\n  }, [seed]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div\n        style={{\n          display: 'inline-grid',\n          gridTemplateColumns: 'repeat(5, 1fr)',\n        }}\n      >\n        {board.map((kind, id) => {\n          return <Square kind={kind} key={id} />;\n        })}\n      </div>\n      <input\n        disabled\n        value={window.location.href}\n        style={{\n          textAlign: 'center',\n          fontSize: 16,\n          marginBottom: 4,\n          marginTop: 4,\n        }}\n      />\n      <GenerateButton />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Landing from './Landing';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignContent: 'center',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n        backgroundColor: '#ddd',\n        height: '100vh',\n      }}\n    >\n      <Router>\n        <Switch>\n          <Route path=\"/:seed\">\n            <Game />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}